'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
import time
from useful_functions.mathematics import factors_of


# factors_of() is an implementation of factor-finding algorithm that runs in 0(n) = sqrt(n)
# iterates down from sqrt(n) to 1 and adds all the factors i found plus their n/i counterpart
# can be found in useful_functions.mathematics
def solution():
    iter = 1
    triangle_num = 1
    # iterate through triangle numbers and break when there are more than 500 factors
    while len(factors_of(triangle_num)) < 500:
        iter += 1
        triangle_num += iter
    return triangle_num


start_time = time.time()
print(solution())
print("Runtime: %s seconds" % (time.time() - start_time))
